/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphicconnect4;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author DELL
 */
public class Connect4 extends javax.swing.JFrame implements ActionListener {

    public ArrayList<Integer> open = new ArrayList<Integer>();

    int start = 0;
    Boolean AI = false;
    JButton[][] butArray = new JButton[6][7];
    String[][] board = new String[6][7];

    int moves = 0; //counts how many moves a person has made
    boolean gameOver = false;

    /**
     * Creates new form MatchingFrame
     */
    public Connect4() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GamePanel = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        ResultDisplay = new javax.swing.JTextField();
        NewGame = new javax.swing.JButton();
        AIBut = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(800, 700));

        GamePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        GamePanel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        GamePanel.setPreferredSize(new java.awt.Dimension(500, 400));
        GamePanel.setLayout(new java.awt.GridLayout(6, 7, 10, 10));

        Title.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Connect 4");

        ResultDisplay.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ResultDisplay.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ResultDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultDisplayActionPerformed(evt);
            }
        });

        NewGame.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        NewGame.setText("New Game");
        NewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGameActionPerformed(evt);
            }
        });

        AIBut.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        AIBut.setText("AI");
        AIBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AIButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(GamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NewGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AIBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(ResultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(GamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(AIBut, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(NewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(ResultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResultDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultDisplayActionPerformed

    private void NewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGameActionPerformed
        start++;
        moves = start;
        gameOver = false;
        for (int a = 0; a < 6; a++) {
            for (int b = 0; b < 7; b++) {
                board[a][b] = " ";//resets board
                butArray[a][b].setText(" ");//clears all buttons
                butArray[a][b].setEnabled(true); //lets them click button again
                butArray[a][b].setBackground(new Color(240, 240, 240)); //resets background color to white
                if (start % 2 == 0) {
                    ResultDisplay.setText("Red Move");

                } else {
                    ResultDisplay.setText("Blue Move");
                }
            }

        }
        if (AI && start % 2 == 1) {
            int AICol = 3; //
            for (int i2 = 5; i2 >= 0; i2--) {
                if (board[i2][AICol].equals(" ")) {

                    butArray[i2][AICol].setBackground(new Color(0, 0, 200));
                    board[i2][AICol] = "b";
                    break;
                }
            }
            moves++;
        }
        for (int i = 0; i < 7; i++) {
            open.add(i);
        }
    }//GEN-LAST:event_NewGameActionPerformed

    private void AIButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AIButActionPerformed
        AI = !AI;
        ResultDisplay.setText("AI= " + AI);
        if (AI && moves % 2 == 1) {
            int AICol = getPlace();
            for (int i2 = 5; i2 >= 0; i2--) {
                if (board[i2][AICol].equals(" ")) {

                    butArray[i2][AICol].setBackground(new Color(0, 0, 200));
                    board[i2][AICol] = "b";
                    break;
                }
            }
            moves++;

            int y = checkWin();
            if (y == 1) {
                ResultDisplay.setText("Red win");
                gameOver = true;
            }
            if (y == 2) {
                ResultDisplay.setText("Blue win");
                gameOver = true;
            }
            if (y == 0) {
                int count = 0;
                for (int r1 = 0; r1 < 3; r1++) {
                    for (int c1 = 0; c1 < 3; c1++) {
                        if (butArray[r1][c1].getText().equals("r") || butArray[r1][c1].getText().equals("b")) {
                            count++;

                        }
                    }
                }
                if (count == 42) {
                    ResultDisplay.setText("Tie!");
                    gameOver = true;
                }
            }
        }
    }//GEN-LAST:event_AIButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Connect4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Connect4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton AIBut;
    private javax.swing.JPanel GamePanel;
    private javax.swing.JButton NewGame;
    private javax.swing.JTextField ResultDisplay;
    private javax.swing.JLabel Title;
    // End of variables declaration//GEN-END:variables
public void initialize() {
        for (int i = 0; i < 7; i++) {
            open.add(i);
        }
        for (int r = 0; r < 6; r++) {
            for (int c = 0; c < 7; c++) {

                board[r][c] = " "; //sets everything in array to 0, no need to deal with empty arrays
                butArray[r][c] = new JButton(); //creates an array of buttons
                butArray[r][c].addActionListener(this);
                butArray[r][c].setSize(50, 50);
                butArray[r][c].setBackground(new Color(240, 240, 240)); //sets default color to white
                butArray[r][c].setText(" "); // sets default display to spaces
                butArray[r][c].setFont(new Font("Arial", Font.PLAIN, 40));
                GamePanel.add(butArray[r][c]);
                if (moves % 2 == 0) {
                    ResultDisplay.setText("Red Move");

                } else {
                    ResultDisplay.setText("Blue Move");
                }

            }
        }

        // butArray = CreateBoard(); //creates the butArray that the player will be playing on
    }

    public int placePiece(int col) {
        int row = -1;
        for (int i = 5; i >= 0; i--) {
            if (board[i][col].equals(" ")) {
                row = i;
                break;
            }
        }
        return row;
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if (!AI) {
            for (int r = 0; r < 6; r++) {
                for (int c = 0; c < 7; c++) {

                    if (ae.getSource() == butArray[r][c]) {
                        if (!gameOver) {
                            if (!board[0][c].equals(" ")) {
                                ResultDisplay.setText("Bad spot, please choose somewhere else");

                            } else {
                                int col = c;

                                int row = placePiece(col);
                                if (moves % 2 == 0) {
                                    butArray[row][col].setBackground(new Color(200, 0, 0));
                                    board[row][col] = "r";
                                } else {
                                    butArray[row][col].setBackground(new Color(0, 0, 200));
                                    board[row][col] = "b";

                                }

                                moves++;
                                if (moves % 2 == 0) {
                                    ResultDisplay.setText("Red Move");

                                } else {
                                    ResultDisplay.setText("Blue Move");
                                }
                                int x = checkWin();
                                if (x == 1) {
                                    ResultDisplay.setText("Red win");
                                    gameOver = true;
                                }
                                if (x == 2) {
                                    ResultDisplay.setText("Blue win");
                                    gameOver = true;
                                }
                                if (x == 0) {
                                    int count = 0;
                                    for (int r1 = 0; r1 < 6; r1++) {
                                        for (int c1 = 0; c1 < 7; c1++) {
                                            if (board[r1][c1].equals("r") || board[r1][c1].equals("b")) {
                                                count++;

                                            }
                                        }
                                    }
                                    if (count == 42) {
                                        ResultDisplay.setText("Tie!");
                                        gameOver = true;
                                    }
                                }
                            }
                        }
                    }
                }

            }
        } else {
            for (int r = 0; r < 6; r++) {
                for (int c = 0; c < 7; c++) {
                    if (ae.getSource() == butArray[r][c]) {
                        if (!gameOver) {
                            if (!board[0][c].equals(" ")) {
                                ResultDisplay.setText("Bad spot, please choose somewhere else");

                            } else {
                                ResultDisplay.setText("Red Move");
                                int col = c;
                                int row = placePiece(col);

                                butArray[row][col].setBackground(new Color(200, 0, 0));
                                board[row][col] = "r";
                                moves++;
                                int x = checkWin();
                                if (x == 1) {
                                    ResultDisplay.setText("Red win");
                                    gameOver = true;
                                }
//                                if (x == 2) {
//                                    ResultDisplay.setText("Blue win");
//                                    gameOver = true;
//                                }
                                if (x == 0) {
                                    int count = 0;
                                    for (int r1 = 0; r1 < 6; r1++) {
                                        for (int c1 = 0; c1 < 7; c1++) {
                                            if (board[r1][c1].equals("r") || board[r1][c1].equals("b")) {
                                                count++;

                                            }
                                        }
                                    }
                                    if (count == 42) {
                                        ResultDisplay.setText("Tie!");
                                        gameOver = true;
                                    }
                                }

                                /////AI placing chips, AI always blue
                                if (!gameOver) {
                                    int AICol = getPlace();

                                    for (int i2 = 5; i2 >= 0; i2--) {
                                        if (board[i2][AICol].equals(" ")) {

                                            butArray[i2][AICol].setBackground(new Color(0, 0, 200));
                                            board[i2][AICol] = "b";
                                            break;
                                        }
                                    }
                                    moves++;

                                    int y = checkWin();
                                    if (y == 1) {
                                        ResultDisplay.setText("Red win");
                                        gameOver = true;
                                    }
                                    if (y == 2) {
                                        ResultDisplay.setText("Blue win");
                                        gameOver = true;
                                    }
                                    if (x == 0) {
                                        int count = 0;
                                        for (int r1 = 0; r1 < 6; r1++) {
                                            for (int c1 = 0; c1 < 7; c1++) {
                                                if (board[r1][c1].equals("r") || board[r1][c1].equals("b")) {
                                                    count++;

                                                }
                                            }
                                        }
                                        if (count == 42) {
                                            ResultDisplay.setText("Tie!");
                                            gameOver = true;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public int checkWin() {
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for red
            for (int c = 0; c < 4; c += 1) {

                if (board[r][c].equals("r") && board[r][c + 1].equals("r") && board[r][c + 2].equals("r") && board[r][c + 3].equals("r")) {
                    butArray[r][c].setText("X");
                    butArray[r][c + 1].setText("X");
                    butArray[r][c + 2].setText("X");
                    butArray[r][c + 3].setText("X");
                    return 1;

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for blue
            for (int c = 0; c < 4; c += 1) {

                if (board[r][c].equals("b") && board[r][c + 1].equals("b") && board[r][c + 2].equals("b") && board[r][c + 3].equals("b")) {
                    butArray[r][c].setText("X");
                    butArray[r][c + 1].setText("X");
                    butArray[r][c + 2].setText("X");
                    butArray[r][c + 3].setText("X");
                    return 2;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Vertical win for red
            for (int c = 0; c < 7; c++) {

                if (board[r][c].equals("r") && board[r - 1][c].equals("r") && board[r - 2][c].equals("r") && board[r - 3][c].equals("r")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c].setText("X");
                    butArray[r - 2][c].setText("X");
                    butArray[r - 3][c].setText("X");
                    return 1;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Vertical win for blue
            for (int c = 0; c < 7; c++) {

                if (board[r][c].equals("b") && board[r - 1][c].equals("b") && board[r - 2][c].equals("b") && board[r - 3][c].equals("b")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c].setText("X");
                    butArray[r - 2][c].setText("X");
                    butArray[r - 3][c].setText("X");
                    return 2;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for red
            for (int c = 0; c < 4; c++) {

                if (board[r][c].equals("r") && board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals("r") && board[r - 3][c + 3].equals("r")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c + 1].setText("X");
                    butArray[r - 2][c + 2].setText("X");
                    butArray[r - 3][c + 3].setText("X");
                    return 1;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for blue
            for (int c = 0; c < 4; c++) {

                if (board[r][c].equals("b") && board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals("b") && board[r - 3][c + 3].equals("b")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c + 1].setText("X");
                    butArray[r - 2][c + 2].setText("X");
                    butArray[r - 3][c + 3].setText("X");
                    return 2;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for red
            for (int c = 3; c < 7; c++) {

                if (board[r][c].equals("r") && board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals("r") && board[r - 3][c - 3].equals("r")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c - 1].setText("X");
                    butArray[r - 2][c - 2].setText("X");
                    butArray[r - 3][c - 3].setText("X");
                    return 1;

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for blue
            for (int c = 3; c < 7; c++) {

                if (board[r][c].equals("b") && board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals("b") && board[r - 3][c - 3].equals("b")) {
                    butArray[r][c].setText("X");
                    butArray[r - 1][c - 1].setText("X");
                    butArray[r - 2][c - 2].setText("X");
                    butArray[r - 3][c - 3].setText("X");
                    return 2;

                }

            }
        }

        return 0;

    }

    public int getPlace() { //AI stuff
        for (int i = 0; i < open.size(); i++) {
            if (!board[0][open.get(i)].equals(" ")) {
                open.remove(i);
                i--;
            }
        }

        if (win() >= 0) { //go for win
            return win();
        }

        if (block() >= 0) { //go for block
            return block();
        }
        ArrayList<Integer> ok = new ArrayList<Integer>();
        for (int i = 0; i < open.size(); i++) {
            int row = placePiece(open.get(i));
            board[row][open.get(i)] = "b";
            if (block() < 0) {
                ok.add(open.get(i));
            }
            board[row][open.get(i)] = " ";
        }
        int x1 = DoubleTrapH();
        if (checkOk(ok, x1)) {
            return x1;
        }
        int y1 = DoubleTrapD1();

        if (checkOk(ok, y1)) {
            return y1;
        }
        int z1 = DoubleTrapD2();

        if (checkOk(ok, z1)) {
            return z1;
        }
        int x2 = DoubleTrapHB();
        if (checkOk(ok, x2)) {
            return x2;
        }
        int y2 = DoubleTrapBD1();

        if (checkOk(ok, y2)) {
            return y2;
        }
        int z2 = DoubleTrapBD2();

        if (checkOk(ok, z2)) {
            return z2;
        }
        int x = H();

        if (checkOk(ok, x)) {
            return x;
        }
        int y = D1();

        if (checkOk(ok, y)) {
            return y;
        }
        int z = D2();

        if (checkOk(ok, z)) {
            return z;
        }

        int okplaces = ok.size(); //goes for places that doesn't reult in opponent win
        if (okplaces > 0) {
            return ok.get((int) (okplaces * Math.random()));
        }
        int coordinates = (int) (open.size() * Math.random());
        return open.get(coordinates);

    }

    public boolean checkOk(ArrayList<Integer> ok, int p) {
        return ok.contains(p);

    }

    public int win() {
        for (int r = 5; r >= 3; r--) { //Vertical win for blue
            for (int c = 0; c < 7; c++) {
                if (board[r][c].equals("b") && board[r - 1][c].equals("b") && board[r - 2][c].equals("b") && board[r - 3][c].equals(" ")) {
                    return c;
                }

            }
        }
        ///////Horizontal Win for blue
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for blue
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals(" ") && board[r][c + 1].equals("b") && board[r][c + 2].equals("b") && board[r][c + 3].equals("b")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }

                }

            }
        }

        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for blue
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 1].equals(" ") && board[r][c + 2].equals("b") && board[r][c + 3].equals("b")) {
                    if ((r == 5 || !board[r + 1][c + 1].equals(" "))) {
                        return c + 1;
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for blue
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 1].equals("b") && board[r][c + 2].equals(" ") && board[r][c + 3].equals("b")) {
                    if ((r == 5 || !board[r + 1][c + 2].equals(" "))) {
                        return c + 2;
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for blue
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 1].equals("b") && board[r][c + 2].equals("b") && board[r][c + 3].equals(" ")) {
                    if ((r == 5 || !board[r + 1][c + 3].equals(" "))) {
                        return c + 3;
                    }

                }

            }
        }
        ////////Diagonal win 1
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for blue
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals(" ") && board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals("b") && board[r - 3][c + 3].equals("b")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for blue
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("b") && board[r - 1][c + 1].equals(" ") && board[r - 2][c + 2].equals("b") && board[r - 3][c + 3].equals("b")) {
                    if (!board[r][c + 1].equals(" ")) {
                        return c + 1;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for blue
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("b") && board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals("b")) {
                    if (!board[r - 1][c + 2].equals(" ")) {
                        return c + 2;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for blue
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("b") && board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals("b") && board[r - 3][c + 3].equals(" ")) {
                    if (!board[r - 2][c + 3].equals(" ")) {
                        return c + 3;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for blue
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals(" ") && board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals("b") && board[r - 3][c - 3].equals("b")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for blue
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("b") && board[r - 1][c - 1].equals(" ") && board[r - 2][c - 2].equals("b") && board[r - 3][c - 3].equals("b")) {
                    if (!board[r][c - 1].equals(" ")) {
                        return c - 1;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for blue
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("b") && board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals("b")) {
                    if (!board[r - 1][c - 2].equals(" ")) {
                        return c - 2;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for blue
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("b") && board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals("b") && board[r - 3][c - 3].equals(" ")) {
                    if (!board[r - 2][c - 3].equals(" ")) {
                        return c - 3;
                    }
                }
            }
        }
        return -1;
    }

    public int block() {
        for (int r = 5; r >= 3; r--) { //Vertical win for red
            for (int c = 0; c < 7; c++) {
                if (board[r][c].equals("r") && board[r - 1][c].equals("r") && board[r - 2][c].equals("r") && board[r - 3][c].equals(" ")) {
                    return c;
                }

            }
        }
        ///////Horizontal Win for red
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for red
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals(" ") && board[r][c + 1].equals("r") && board[r][c + 2].equals("r") && board[r][c + 3].equals("r")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }

                }

            }
        }

        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for red
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 1].equals(" ") && board[r][c + 2].equals("r") && board[r][c + 3].equals("r")) {
                    if ((r == 5 || !board[r + 1][c + 1].equals(" "))) {
                        return c + 1;
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for red
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 1].equals("r") && board[r][c + 2].equals(" ") && board[r][c + 3].equals("r")) {
                    if ((r == 5 || !board[r + 1][c + 2].equals(" "))) {
                        return c + 2;
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal win for red
            for (int c = 0; c < 4; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 1].equals("r") && board[r][c + 2].equals("r") && board[r][c + 3].equals(" ")) {
                    if ((r == 5 || !board[r + 1][c + 3].equals(" "))) {
                        return c + 3;
                    }

                }

            }
        }
        ////////Diagonal win 1
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for red
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals(" ") && board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals("r") && board[r - 3][c + 3].equals("r")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }

                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for red
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("r") && board[r - 1][c + 1].equals(" ") && board[r - 2][c + 2].equals("r") && board[r - 3][c + 3].equals("r")) {
                    if (!board[r][c + 1].equals(" ")) {
                        return c + 1;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for red
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("r") && board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals("r")) {
                    if (!board[r - 1][c + 2].equals(" ")) {
                        return c + 2;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal1 win for red
            for (int c = 0; c < 4; c++) {
                if (board[r][c].equals("r") && board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals("r") && board[r - 3][c + 3].equals(" ")) {
                    if (!board[r - 2][c + 3].equals(" ")) {
                        return c + 3;
                    }
                }

            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for red
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals(" ") && board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals("r") && board[r - 3][c - 3].equals("r")) {
                    if (r == 5 || !board[r + 1][c].equals(" ")) {
                        return c;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for red
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("r") && board[r - 1][c - 1].equals(" ") && board[r - 2][c - 2].equals("r") && board[r - 3][c - 3].equals("r")) {
                    if (!board[r][c - 1].equals(" ")) {
                        return c - 1;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for red
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("r") && board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals("r")) {
                    if (!board[r - 1][c - 2].equals(" ")) {
                        return c - 2;
                    }
                }
            }
        }
        for (int r = 5; r >= 3; r--) { //Diagonal2 win for red
            for (int c = 3; c < 7; c++) {
                if (board[r][c].equals("r") && board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals("r") && board[r - 3][c - 3].equals(" ")) {
                    if (!board[r - 2][c - 3].equals(" ")) {
                        return c - 3;
                    }
                }
            }
        }
        return -1;
    }

    public int DoubleTrapH() {
        for (int r = 5; r >= 0; r -= 1) { //Horizontal middle win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 2].equals("b")) {
                    if (r == 5) {
                        if (board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c + 1;
                        }
                    } else {
                        if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal left win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c + 1].equals("b") && board[r][c + 2].equals("b")) {
                    if (r == 5) {
                        if (board[r][c].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }

            }
        }

        for (int r = 5; r >= 0; r -= 1) { //Horizontal right win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 1].equals("b")) {
                    if (r == 5) {
                        if (board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c + 2;
                        }
                    } else {
                        if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    }

                }

            }
        }
        return -1;
    }

    public int DoubleTrapHB() {
        for (int r = 5; r >= 0; r -= 1) { //Horizontal middle win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 2].equals("r")) {
                    if (r == 5) {
                        if (board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c + 1;
                        }
                    } else {
                        if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    }

                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal left win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c + 1].equals("r") && board[r][c + 2].equals("r")) {
                    if (r == 5) {
                        if (board[r][c].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }

            }
        }

        for (int r = 5; r >= 0; r -= 1) { //Horizontal right win
            for (int c = 1; c < 4; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 1].equals("r")) {
                    if (r == 5) {
                        if (board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ") && board[r][c + 3].equals(" ")) {
                            return c + 2;
                        }
                    } else {
                        if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ")) {
                            if (board[r][c - 1].equals(" ") && !board[r + 1][c - 1].equals(" ") && board[r][c + 3].equals(" ") && !board[r + 1][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    }

                }

            }
        }
        return -1;
    }

    public int DoubleTrapD1() {
        for (int r = 4; r >= 3; r--) { //Diagonal1 middle win
            for (int c = 1; c < 4; c++) {
                if (board[r][c].equals("b") && board[r - 2][c + 2].equals("b")) {
                    if (r == 4) {
                        if (board[r - 1][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c + 1;
                        }
                    } else {
                        if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    }

                }

            }
        }

        for (int r = 4; r >= 3; r--) { //Diagonal1 right win
            for (int c = 1; c < 4; c++) {
                if (board[r - 1][c + 1].equals("b") && board[r][c].equals("b")) {
                    if (r == 4) {
                        if (board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c + 2;
                        }
                    } else {
                        if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    }

                }

            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal1 middle win
            for (int c = 1; c < 4; c++) {
                if (board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals("b")) {
                    if (r == 4) {
                        if (board[r][c].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }

            }
        }
        return -1;
    }

    public int DoubleTrapBD1() {
        for (int r = 4; r >= 3; r--) { //Diagonal1 middle win
            for (int c = 1; c < 4; c++) {
                if (board[r][c].equals("r") && board[r - 2][c + 2].equals("r")) {
                    if (r == 4) {
                        if (board[r - 1][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c + 1;
                        }
                    } else {
                        if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    }

                }

            }
        }

        for (int r = 4; r >= 3; r--) { //Diagonal1 right win
            for (int c = 1; c < 4; c++) {
                if (board[r - 1][c + 1].equals("r") && board[r][c].equals("r")) {
                    if (r == 4) {
                        if (board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c + 2;
                        }
                    } else {
                        if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    }

                }

            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal1 middle win
            for (int c = 1; c < 4; c++) {
                if (board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals("r")) {
                    if (r == 4) {
                        if (board[r][c].equals(" ") && board[r + 1][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r + 1][c - 1].equals(" ") && !board[r + 2][c - 1].equals(" ") && board[r - 3][c + 3].equals(" ") && !board[r - 2][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }

            }
        }
        return -1;
    }

    public int DoubleTrapD2() {
        for (int r = 4; r >= 3; r--) { //Diagonal2 middle win
            for (int c = 3; c < 6; c++) {
                if (board[r][c].equals("b") && board[r - 2][c - 2].equals("b")) {
                    if (r == 4) {
                        if (board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c - 1;
                        }
                    } else {
                        if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        }
                    }

                }
            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal2 left win
            for (int c = 3; c < 6; c++) {
                if (board[r - 1][c - 1].equals("b") && board[r][c].equals("b")) {
                    if (r == 4) {
                        if (board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c - 2;
                        }
                    } else {
                        if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        }
                    }

                }
            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal2 right win
            for (int c = 3; c < 6; c++) {
                if (board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals("b")) {
                    if (r == 4) {
                        if (board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }
            }
        }
        return -1;
    }

    public int DoubleTrapBD2() {
        for (int r = 4; r >= 3; r--) { //Diagonal2 middle win
            for (int c = 3; c < 6; c++) {
                if (board[r][c].equals("r") && board[r - 2][c - 2].equals("r")) {
                    if (r == 4) {
                        if (board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c - 1;
                        }
                    } else {
                        if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        }
                    }

                }
            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal2 left win
            for (int c = 3; c < 6; c++) {
                if (board[r - 1][c - 1].equals("r") && board[r][c].equals("r")) {
                    if (r == 4) {
                        if (board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c - 2;
                        }
                    } else {
                        if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        }
                    }

                }
            }
        }
        for (int r = 4; r >= 3; r--) { //Diagonal2 right win
            for (int c = 3; c < 6; c++) {
                if (board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals("r")) {
                    if (r == 4) {
                        if (board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                            return c;
                        }
                    } else {
                        if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ")) {
                            if (board[r + 1][c + 1].equals(" ") && !board[r + 2][c - 3].equals(" ") && board[r - 3][c - 3].equals(" ") && !board[r - 2][c - 3].equals(" ")) {
                                return c;
                            }
                        }
                    }

                }
            }
        }
        return -1;
    }

    public int H() {

        for (int r = 5; r >= 0; r -= 1) { //Horizontal left win

            for (int c = 0; c < 5; c += 1) {
                if (board[r][c + 1].equals("b") && board[r][c + 2].equals("b")) {
                    if (c == 0) {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c;
                            }
                        }

                    } else if (c == 4) {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c;
                            }
                        }

                    } else {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal middle win

            for (int c = 0; c < 5; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 2].equals("b")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else if (c == 4) {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 1;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal right win
            for (int c = 0; c < 5; c += 1) {
                if (board[r][c].equals("b") && board[r][c + 1].equals("b")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    } else if (c == 4) {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 2;
                            }
                        }
                    }
                }

            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal left win

            for (int c = 0; c < 5; c += 1) {
                if (board[r][c + 1].equals("r") && board[r][c + 2].equals("r")) {
                    if (c == 0) {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c;
                            }
                        }

                    } else if (c == 4) {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c;
                            }
                        }

                    } else {

                        if (r == 5) {
                            if (board[r][c].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal middle win

            for (int c = 0; c < 5; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 2].equals("r")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else if (c == 4) {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c + 1].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r + 1][c + 1].equals(" ") && board[r][c + 1].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 1;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 0; r -= 1) { //Horizontal right win
            for (int c = 0; c < 5; c += 1) {
                if (board[r][c].equals("r") && board[r][c + 1].equals("r")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && board[r][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }
                    } else if (c == 4) {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && board[r][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c + 2].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r + 1][c + 2].equals(" ") && board[r][c + 2].equals(" ") && (board[r][c + 3].equals(" ") || board[r][c - 1].equals(" "))) {
                                return c + 2;
                            }
                        }
                    }
                }

            }
        }
        return -1;
    }

    public int D1() {

        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r][c].equals("b") && board[r - 2][c + 2].equals("b")) {
                    if (c == 0) {
                        if (r != 2) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 1;
                            }
//                       
                        }
                    } else {
                        if (r == 5) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        } else if (r == 2) {
                            if (board[r - 1][c + 1].equals(" ") && !board[r][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && (board[r + 1][c - 1].equals(" ") || board[r - 3][c + 3].equals(" "))) {
                                return c + 1;
                            }
                        }
                    }
                }

            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r - 1][c + 1].equals("b") && board[r][c].equals("b")) {
                    if (c == 0) {
                        if (r != 2) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }

                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        }

                    } else {
                        if (r == 5) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        } else if (r == 2) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && (board[r + 1][c - 1].equals(" ") || board[r - 3][c + 3].equals(" "))) {
                                return c + 2;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r - 1][c + 1].equals("b") && board[r - 2][c + 2].equals("b")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else if (r != 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else if (r == 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r - 3][c + 3].equals(" ") || board[r + 1][c - 1].equals(" "))) {
                                return c;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r][c].equals("r") && board[r - 2][c + 2].equals("r")) {
                    if (c == 0) {
                        if (r != 2) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        }
                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 1;
                            }
//                       

                        }
                    } else {
                        if (r == 5) {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 1;
                            }
                        } else if (r == 2) {
                            if (board[r - 1][c + 1].equals(" ") && !board[r][c + 1].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 1;
                            }
                        } else {
                            if (!board[r][c + 1].equals(" ") && board[r - 1][c + 1].equals(" ") && (board[r + 1][c - 1].equals(" ") || board[r - 3][c + 3].equals(" "))) {
                                return c + 1;
                            }
                        }
                    }
                }

            }
        }

        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r - 1][c + 1].equals("r") && board[r][c].equals("r")) {
                    if (c == 0) {
                        if (r != 2) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        }

                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        }

                    } else {
                        if (r == 5) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c + 2;
                            }
                        } else if (r == 2) {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c + 2;
                            }
                        } else {
                            if (!board[r - 1][c + 2].equals(" ") && board[r - 2][c + 2].equals(" ") && (board[r + 1][c - 1].equals(" ") || board[r - 3][c + 3].equals(" "))) {
                                return c + 2;
                            }
                        }

                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal1 middle win
            for (int c = 0; c < 5; c++) {
                if (board[r - 1][c + 1].equals("r") && board[r - 2][c + 2].equals("r")) {
                    if (c == 0) {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else if (r != 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        }
                    } else if (c == 4) {
                        if (r != 5) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c - 1].equals(" ")) {
                                return c;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else if (r == 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c + 3].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r - 3][c + 3].equals(" ") || board[r + 1][c - 1].equals(" "))) {
                                return c;
                            }
                        }
                    }
                }
            }
        }

        return -1;
    }

    public int D2() {
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r][c].equals("b") && board[r - 2][c - 2].equals("b")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 1;
                            }
                        }
                    } else if (c == 6) {
                        if (r != 2) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        } else if (r == 2) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 1;
                            }
                        } else {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c - 1;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r - 1][c - 1].equals("b") && board[r][c].equals("b")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 2;
                            }
                        }
                    } else if (c == 6) {
                        if (r != 2) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        } else if (r == 2) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 2;
                            }
                        } else {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c - 2;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r - 1][c - 1].equals("b") && board[r - 2][c - 2].equals("b")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c;
                            }
                        }
                    } else if (c == 6) {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        } else if (r != 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        } else if (r == 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r][c].equals("r") && board[r - 2][c - 2].equals("r")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 1;
                            }
                        }
                    } else if (c == 6) {
                        if (r != 2) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 1;
                            }
                        } else if (r == 2) {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 1;
                            }
                        } else {
                            if (!board[r][c - 1].equals(" ") && board[r - 1][c - 1].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c - 1;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r - 1][c - 1].equals("r") && board[r][c].equals("r")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 2;
                            }
                        }
                    } else if (c == 6) {
                        if (r != 2) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c - 2;
                            }
                        } else if (r == 2) {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c - 2;
                            }
                        } else {
                            if (!board[r - 1][c - 2].equals(" ") && board[r - 2][c - 2].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c - 2;
                            }
                        }
                    }
                }
            }
        }
        for (int r = 5; r >= 2; r--) { //Diagonal2 mid win
            for (int c = 2; c < 7; c++) {
                if (board[r - 1][c - 1].equals("r") && board[r - 2][c - 2].equals("r")) {
                    if (c == 2) {
                        if (r != 5) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c;
                            }
                        }
                    } else if (c == 6) {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        } else if (r != 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        }
                    } else {
                        if (r == 5) {
                            if (board[r][c].equals(" ") && board[r - 3][c - 3].equals(" ")) {
                                return c;
                            }
                        } else if (r == 2) {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && board[r + 1][c + 1].equals(" ")) {
                                return c;
                            }
                        } else {
                            if (!board[r + 1][c].equals(" ") && board[r][c].equals(" ") && (board[r + 1][c + 1].equals(" ") || board[r - 3][c - 3].equals(" "))) {
                                return c;
                            }
                        }
                    }
                }
            }
        }

        return -1;
    }
}
